# generated by fastapi-codegen:
#   filename:  new_yamls/app_14.yaml
#   timestamp: 2022-10-11T21:09:49+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, conint, constr


class Error(BaseModel):
    errorCode: Optional[constr(max_length=5)] = Field(None, description="Код ошибки")
    errorMessage: Optional[constr(max_length=1000)] = Field(None, description="Краткое описание ошибки")


class BankDtoRs(BaseModel):
    bic: Optional[constr(max_length=9)] = Field(None, description="БИК банка")
    name: Optional[constr(max_length=255)] = Field(None, description="Наименование банка")


class Name(Enum):
    MOBILE = "MOBILE"
    WEB = "WEB"
    ATM = "ATM"
    MOBILE_LITE = "MOBILE_LITE"
    WEB_LITE = "WEB_LITE"


class ChannelDtoRs(BaseModel):
    name: Name = Field(..., description="Наименование канала")
    visible: bool = Field(..., description="Видимость канала")


class ErrorDtoRs(BaseModel):
    message: Optional[constr(max_length=255)] = Field(None, description="Сообщение об ошибке")
    type: Optional[constr(max_length=64)] = Field(None, description="Тип ошибки")


class Key(Enum):
    PAYMENT = "PAYMENT"
    TEMPLATE = "TEMPLATE"
    AUTOPAYMENT_BY_DATE = "AUTOPAYMENT_BY_DATE"
    AUTOPAYMENT_BY_BALANCE = "AUTOPAYMENT_BY_BALANCE"
    INVOICE = "INVOICE"
    REPEAT = "REPEAT"
    REMIND = "REMIND"
    SUBSCRIPTION = "SUBSCRIPTION"


class SystemId(Enum):
    MINERVA = "MINERVA"
    MS = "MS"


class OperationActionDtoRs(BaseModel):
    key: Key = Field(..., description="Действие, которое можно произвести над услугой")
    systemId: Optional[SystemId] = Field(
        None,
        description="Имя системы, которая будет проводить операцию, если не задано считается что операцию выполняет MS",
    )


class PaymentReceiverDtoRs(BaseModel):
    account: Optional[constr(max_length=20)] = Field(None, description="Номер счета получателя платежа")
    bank: Optional[BankDtoRs] = None
    inn: Optional[constr(max_length=12)] = Field(None, description="ИНН получателя платежа")
    kpp: Optional[constr(max_length=9)] = Field(None, description="КПП получателя платежа")


class ClientRolePayRestriction(Enum):
    ANONYM_CLIENT = "ANONYM_CLIENT"
    UPRID_CLIENT = "UPRID_CLIENT"


class PaymentSettingsDetailDtoRs(BaseModel):
    acceptanceKey: Optional[constr(max_length=64)] = Field(
        None, description="Ключ-наименование микросервиса для оплаты услуги"
    )
    clientRolePayRestrictions: Optional[List[ClientRolePayRestriction]] = Field(
        None,
        description="Ограничения для совершения платежа по типу аутентификации клиента",
    )


class PaymentSettingsSearchDtoRs(BaseModel):
    acceptanceKey: Optional[constr(max_length=64)] = Field(
        None, description="Ключ-наименование микросервиса для оплаты услуги"
    )
    clientAuthTypePayAvailable: Optional[bool] = Field(None, description="Флаг недоступности оплаты текущему клиенту")


class Status(Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class SubType(Enum):
    MOBILE_BY_PHONE = "MOBILE_BY_PHONE"


class Type(Enum):
    CONTRACT = "CONTRACT"


class ServiceProviderDetailDtoRs(BaseModel):
    actions: Optional[List[OperationActionDtoRs]] = Field(None, description="Список возможных действий над услугой")
    categoryIds: Optional[List[constr(max_length=20)]] = Field(
        None, description="Список идентификаторов категорий, в которых доступна услуга"
    )
    channels: Optional[List[ChannelDtoRs]] = Field(None, description="Информация о каналах услуги")
    description: Optional[constr(max_length=2000)] = Field(None, description="Описание услуги")
    facadeOperationCode: Optional[constr(max_length=64)] = Field(
        None, description='Код "фасадки", в случае если операция - "реалка"'
    )
    id: constr(max_length=64) = Field(..., description="Идентификатор услуги")
    name: constr(max_length=255) = Field(..., description="Наименование услуги")
    operationCode: constr(max_length=64) = Field(..., description="Код операции (услуги)")
    partners: Optional[List[constr(max_length=30)]] = Field(
        None,
        description="Список идентификаторов партнеров, для которых доступна услуга при обращении в канале OPEN_API",
    )
    pmntSettings: Optional[PaymentSettingsDetailDtoRs] = None
    productId: Optional[constr(max_length=64)] = Field(None, description="Идентификатор продукта")
    receiver: Optional[PaymentReceiverDtoRs] = None
    regionIds: Optional[List[constr(max_length=100)]] = Field(
        None, description="Список кодов регионов, в которых доступна услуга"
    )
    shortName: Optional[constr(max_length=255)] = Field(None, description="Короткое наименование услуги")
    status: Status = Field(..., description="Статус услуги")
    subTypes: Optional[List[SubType]] = Field(None, description="Подтипы услуги")
    type: Type = Field(..., description="Тип услуги")


class SubType1(Enum):
    MOBILE_BY_PHONE = "MOBILE_BY_PHONE"
    FEDERAL = "FEDERAL"
    BY_ACCOUNT_TO_ANOTHER_BANK = "BY_ACCOUNT_TO_ANOTHER_BANK"
    BY_ACCOUNT_TO_INTERNAL = "BY_ACCOUNT_TO_INTERNAL"
    TO_ANOTHER_BANK = "TO_ANOTHER_BANK"
    TO_INTERNAL = "TO_INTERNAL"


class SubType2(Enum):
    MOBILE_BY_PHONE = "MOBILE_BY_PHONE"
    FEDERAL = "FEDERAL"
    BY_ACCOUNT_TO_ANOTHER_BANK = "BY_ACCOUNT_TO_ANOTHER_BANK"
    BY_ACCOUNT_TO_INTERNAL = "BY_ACCOUNT_TO_INTERNAL"
    TO_ANOTHER_BANK = "TO_ANOTHER_BANK"
    TO_INTERNAL = "TO_INTERNAL"


class Type1(Enum):
    CONTRACT = "CONTRACT"
    GIS_HCS = "GIS_HCS"


class ServiceProviderSearchDtoRs(BaseModel):
    actions: Optional[List[OperationActionDtoRs]] = Field(None, description="Список возможных действий над услугой")
    categoryIds: Optional[List[constr(max_length=20)]] = Field(
        None, description="Список идентификаторов категорий, в которых доступна услуга"
    )
    description: Optional[constr(max_length=2000)] = Field(None, description="Описание услуги")
    id: constr(max_length=64) = Field(..., description="Идентификатор услуги")
    name: constr(max_length=255) = Field(..., description="Наименование услуги")
    operationCode: constr(max_length=64) = Field(..., description="Код операции (услуги)")
    pmntSettings: Optional[PaymentSettingsSearchDtoRs] = None
    productId: Optional[constr(max_length=64)] = Field(None, description="Идентификатор продукта")
    receiver: Optional[PaymentReceiverDtoRs] = None
    regionIds: Optional[List[constr(max_length=100)]] = Field(
        None, description="Список кодов регионов, в которых доступна услуга"
    )
    shortName: Optional[constr(max_length=255)] = Field(None, description="Короткое наименование услуги")
    subType: Optional[SubType1] = Field(None, description="Подтип услуги (deprecated, см. subTypes)")
    subTypes: Optional[List[SubType2]] = Field(None, description="Подтипы услуги")
    type: Type1 = Field(..., description="Тип услуги")


class XCLIENTCHANNEL(Enum):
    MOBILE = "MOBILE"
    ATM = "ATM"
    WEB = "WEB"
    OPEN_API = "OPEN_API"


class XCLIENTCHANNEL1(Enum):
    MOBILE = "MOBILE"
    ATM = "ATM"
    WEB = "WEB"
    OPEN_API = "OPEN_API"


class XCLIENTCHANNEL2(Enum):
    MOBILE = "MOBILE"
    ATM = "ATM"
    WEB = "WEB"
    OPEN_API = "OPEN_API"


class XCLIENTCHANNEL3(Enum):
    MOBILE = "MOBILE"
    ATM = "ATM"
    WEB = "WEB"
    OPEN_API = "OPEN_API"


class XCLIENTCHANNEL4(Enum):
    MOBILE = "MOBILE"
    ATM = "ATM"
    WEB = "WEB"
    OPEN_API = "OPEN_API"


class XCLIENTCHANNEL5(Enum):
    MOBILE = "MOBILE"
    ATM = "ATM"
    WEB = "WEB"
    OPEN_API = "OPEN_API"


class GenericError(BaseModel):
    httpCode: constr(max_length=3) = Field(..., description="HTTP код ошибки", example="400")
    httpMessage: Optional[constr(max_length=255)] = Field(
        None, description="HTTP описание ошибки", example="Bad Request"
    )
    moreInformation: Optional[constr(max_length=255)] = Field(
        None, description="Подробная информация об ошибке", example="Bad Request"
    )
    error: Optional[Error] = None


class CategoryDtoRs(BaseModel):
    id: constr(max_length=16) = Field(..., description="ID категории ПУ")
    name: constr(max_length=255) = Field(..., description="Название категории ПУ")
    nameKey: Optional[constr(max_length=64)] = Field(None, description="Уникальный текстовой код категории")
    serviceProviders: Optional[List[ServiceProviderSearchDtoRs]] = Field(None, description="Список услуг")


class PageDtoRsCategoryDtoRs(BaseModel):
    hasMore: bool = Field(..., description="Признак наличия следующей страницы с результатами")
    items: List[CategoryDtoRs] = Field(..., description="Список объектов страницы")
    pageNumber: conint(ge=0, le=2147483647) = Field(..., description="Номер страницы")
    pageSize: conint(ge=0, le=100) = Field(..., description="Размер страницы")
    total: conint(ge=0, le=2147483647) = Field(..., description="Общее число результатов")


class PageDtoRsServiceProviderDetailDtoRs(BaseModel):
    hasMore: bool = Field(..., description="Признак наличия следующей страницы с результатами")
    items: List[ServiceProviderDetailDtoRs] = Field(..., description="Список объектов страницы")
    pageNumber: conint(ge=0, le=2147483647) = Field(..., description="Номер страницы")
    pageSize: conint(ge=0, le=100) = Field(..., description="Размер страницы")
    total: conint(ge=0, le=2147483647) = Field(..., description="Общее число результатов")


class PageDtoRsServiceProviderSearchDtoRs(BaseModel):
    hasMore: bool = Field(..., description="Признак наличия следующей страницы с результатами")
    items: List[ServiceProviderSearchDtoRs] = Field(..., description="Список объектов страницы")
    pageNumber: conint(ge=0, le=2147483647) = Field(..., description="Номер страницы")
    pageSize: conint(ge=0, le=100) = Field(..., description="Размер страницы")
    total: conint(ge=0, le=2147483647) = Field(..., description="Общее число результатов")
