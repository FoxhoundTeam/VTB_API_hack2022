# generated by fastapi-codegen:
#   filename:  new_yamls/app_13.yaml
#   timestamp: 2022-10-11T21:09:52+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, confloat, conint, constr


class Actions(BaseModel):
    checkAvailable: bool = Field(..., description="Возможно получение квитанции")


class Bank(BaseModel):
    bic: Optional[constr(min_length=9, max_length=9)] = Field(
        None, description="БИК банка получателя", example="9611776"
    )
    name: Optional[constr(min_length=3, max_length=201)] = Field(
        None,
        description="Наименование банка получателя",
        example="ГУ банка России по ЦФО",
    )


class ChargeRecipientDetailDtoRs(BaseModel):
    account: Optional[constr(min_length=20, max_length=20)] = Field(None, description="Счет получателя")
    bank: Optional[Bank] = None
    inn: Optional[constr(min_length=10, max_length=12)] = Field(
        None, description="ИНН получателя", example="7703037039"
    )
    kbk: Optional[constr(min_length=20, max_length=20)] = Field(
        None,
        description="КБК код бюджетной классификации",
        example="18811601121010000000",
    )
    kpp: Optional[constr(min_length=9, max_length=9)] = Field(None, description="КПП получателя", example="770245001")
    okato: Optional[constr(min_length=0, max_length=100)] = Field(
        None,
        description="КБК коды бюджетной классификации",
        example="18811601121010000000",
    )
    organizationName: Optional[constr(min_length=3, max_length=201)] = Field(
        None,
        description="Имя получателя",
        example="УФК по МО (УГИБДД ГУ МВД РОССИИ по МО)",
    )


class ChargeRulingDetailDtoRs(BaseModel):
    documentTitle: constr(min_length=1, max_length=255) = Field(
        ...,
        description="Полное наименование документа по АП (тип документа, № постановления, дата постановления)",
        example="Постановление по видеофиксации №18810150200605213474 от 02.10.2020",
    )
    entryForceAt: date = Field(..., description="Дата вступления постановления в силу", example="2020-10-02")
    lawArticle: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Статья КоАП или закона субъекта РФ, состав правонарушения",
        example="12.09.2 - Превышение скорости движения ТС от 20 до 40 км/ч",
    )
    rulingAt: date = Field(..., description="Дата регистрации УИН", example="2020-10-02")
    title: constr(min_length=1, max_length=255) = Field(
        ...,
        description="Короткое наименование штрафа",
        example="Постановление №18810150200605213474 от 02.10.2020",
    )


class ChargeSearchDocument(BaseModel):
    sts: Optional[constr(min_length=10, max_length=10)] = Field(
        None,
        description="Номер Свидетельства о регистрации Транспортного Средства по которому найден штраф",
        example="1234567890",
    )
    vu: Optional[constr(min_length=10, max_length=10)] = Field(
        None,
        description="Номер Водительского Удостоверения по которому найден штраф",
        example="1234567890",
    )


class ClientConfirmCodeDtoRq(BaseModel):
    code: constr(min_length=3, max_length=36) = Field(..., description="Значение кода подтверждения", example="123456")


class Purpose(Enum):
    REQUEST_CODE = "REQUEST_CODE"
    CHECK_CODE = "CHECK_CODE"


class ClientConfirmDtoRq(BaseModel):
    confirmCode: Optional[ClientConfirmCodeDtoRq] = None
    purpose: Purpose = Field(..., description="Цель запроса подтверждения", example="REQUEST_CODE")


class Type(Enum):
    ACCOUNT = "ACCOUNT"
    CARD = "CARD"


class ClientProductDtoRq(BaseModel):
    publicId: constr(min_length=1, max_length=36) = Field(
        ...,
        description="ИД продукта клиента",
        example="1329CD96444B428895BEF56AF8016246",
    )
    type: Type = Field(..., description="Тип продукта клиента", example="ACCOUNT")


class ConfirmCodeDtoRs(BaseModel):
    lifeTime: conint(ge=30, le=180) = Field(..., description="Время жизни кода подтверждения в секундах")


class ConfirmPaymentDtoRq(BaseModel):
    clientConfirm: Optional[ClientConfirmDtoRq] = None
    id: constr(min_length=1, max_length=64) = Field(
        ...,
        description="Ид черновика платежа",
        example="4d9065bc-55f7-4317-b728-5097344dc72f",
    )


class CurrencyDto(BaseModel):
    code: constr(max_length=3) = Field(..., description="Код", example="RUB")


class ProductType(Enum):
    ACCOUNT = "ACCOUNT"
    CARD = "CARD"


class DtoAccountRs(BaseModel):
    productType: ProductType = Field(..., description="Общий тип продукта (ACCOUNT/CARD)", example="ACCOUNT")
    publicId: constr(min_length=1, max_length=36) = Field(
        ...,
        description="Публичный идентификатор продукта",
        example="1329CD96444B428895BEF56AF8016246",
    )


class ProductType1(Enum):
    ACCOUNT = "ACCOUNT"
    CARD = "CARD"


class DtoCardRs(BaseModel):
    productType: ProductType1 = Field(..., description="Общий тип продукта (ACCOUNT/CARD)", example="CARD")
    publicId: constr(min_length=1, max_length=36) = Field(..., description="Публичный идентификатор продукта")


class DtoClientProductRs(BaseModel):
    account: Optional[DtoAccountRs] = None
    card: Optional[DtoCardRs] = None


class DtoClientProductsRs(BaseModel):
    accounts: Optional[List[DtoAccountRs]] = Field(None, description="Список счетов клиента")
    cards: Optional[List[DtoCardRs]] = Field(None, description="Список карт клиента")


class DtoServiceProviderRs(BaseModel):
    name: constr(min_length=1, max_length=255) = Field(
        ..., description="Наименование поставщика услуги", example="Какой-то поставщик"
    )


class ErrorFieldDtoRs(BaseModel):
    code: constr(max_length=255) = Field(..., description="Код ошибки")
    message: constr(max_length=255) = Field(..., description="Текст ошибки", example="Некорректные данные")
    name: constr(max_length=255) = Field(..., description="Ключ/название ошибочного поля")


class MoneyDto(BaseModel):
    amount: confloat(ge=-999999999.0, le=999999999.0) = Field(..., description="Сумма", example=600.0)
    currency: Optional[CurrencyDto] = None


class PayDiscount(BaseModel):
    discountPercent: Optional[conint(ge=0, le=100)] = Field(None, description="Размер скидки в процентах", example=50)
    discountTo: Optional[date] = Field(None, description="Дата до которой действует скидка", example="2020-10-02")
    paySumWithDiscount: Optional[MoneyDto] = None


class PaymentCheckDto(BaseModel):
    pdf: constr(max_length=5000000) = Field(..., description="Чек в формате пдв, закодированный в base64")


class Type1(Enum):
    NotFreshDiscountPeriod = "NotFreshDiscountPeriod"
    FreshDiscountPeriod = "FreshDiscountPeriod"
    PeriodWithoutDiscount = "PeriodWithoutDiscount"
    CloseToOverduePeriod = "CloseToOverduePeriod"
    OverduePeriod = "OverduePeriod"


class PaymentPeriod(BaseModel):
    description: constr(min_length=1, max_length=255) = Field(
        ..., description="Описание состояния периода оплаты", example="Просрочен"
    )
    type: Type1 = Field(..., description="Состояние периода оплаты", example="OverduePeriod")


class Code(Enum):
    PROCESSING = "PROCESSING"
    EXECUTED = "EXECUTED"
    REVIEW = "REVIEW"
    REFUSED = "REFUSED"
    NEED_CONFIRM = "NEED_CONFIRM"
    ERROR = "ERROR"


class PaymentStatusDtoRs(BaseModel):
    code: Code = Field(..., description="Статус платежа", example="NEED_CONFIRM")
    description: Optional[constr(max_length=255)] = Field(
        None, description="Сообщение", example="Платёж находится в обработке"
    )


class RequestPaymentDtoRq(BaseModel):
    clientProduct: ClientProductDtoRq
    document: Optional[ChargeSearchDocument] = None
    uin: constr(min_length=20, max_length=20) = Field(
        ...,
        description="УИН (универсальный идентификатор начисления)",
        example="18810054190022012345",
    )


class Code1(Enum):
    CHARGE_NOT_FOUND = "CHARGE_NOT_FOUND"
    INVALID_REQUEST = "INVALID_REQUEST"
    PRODUCT_NOT_FOUND = "PRODUCT_NOT_FOUND"
    CHARGE_INVALID_STS = "CHARGE_INVALID_STS"
    CHARGE_INVALID_VU = "CHARGE_INVALID_VU"
    CHARGE_EMPTY_STS_AND_VU = "CHARGE_EMPTY_STS_AND_VU"
    CHARGE_NOT_EMPTY_STS_AND_VU = "CHARGE_NOT_EMPTY_STS_AND_VU"
    CHARGE_INVALID_UIN = "CHARGE_INVALID_UIN"
    NOT_VALID_FIELD = "NOT_VALID_FIELD"
    PAY_SUM = "PAY_SUM"
    EMPTY_DRAFT_ID = "EMPTY_DRAFT_ID"
    EMPTY_HEADER_CLIENT_CHANNEL = "EMPTY_HEADER_CLIENT_CHANNEL"
    EMPTY_HEADER_UNC = "EMPTY_HEADER_UNC"
    EMPTY_HEADER_MDM = "EMPTY_HEADER_MDM"


class StatusDtoRs(BaseModel):
    code: Code1 = Field(..., description="Код статуса")
    message: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description="Сообщение", example="Ошбика валидации запроса на оплату"
    )


class ViolationLocation(BaseModel):
    latitude: constr(min_length=1, max_length=255) = Field(
        ..., description="Широта места нарушения", example="55,299750"
    )
    longitude: constr(min_length=1, max_length=255) = Field(
        ..., description="Долгота места нарушения", example="36,700470"
    )


class ChargeInfoDtoRs(BaseModel):
    document: Optional[ChargeSearchDocument] = None
    documentTitle: constr(max_length=255) = Field(
        ...,
        description="Информация о штрафе",
        example="Штраф по административному правонарушению постановление №18810054190022012345",
    )
    uin: constr(max_length=20) = Field(..., description="УИН штрафа", example="18810054190022012345")


class ChargePaymentDetailDtoRs(BaseModel):
    discount: Optional[PayDiscount] = None
    paySum: MoneyDto
    paymentPeriod: PaymentPeriod


class ChargeViolationDetailDtoRs(BaseModel):
    address: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Место нарушения",
        example="МОСКОВСКАЯ ОБЛ. А/Д М-3 «УКРАИНА», 78КМ+812М ПО 81КМ+520М, ИЗ МОСКВЫ",
    )
    location: Optional[ViolationLocation] = None
    photos: Optional[List[constr(min_length=1, max_length=14050919)]] = Field(None, description="Фотографии нарушения")
    violationAt: Optional[date] = Field(None, description="Дата нарушения", example="2020-10-02")


class ClientConfirmDtoRs(BaseModel):
    confirmCode: Optional[ConfirmCodeDtoRs] = None


class DraftDto(BaseModel):
    charge: ChargeInfoDtoRs
    commissionSum: MoneyDto
    description: constr(max_length=210) = Field(
        ...,
        description="Назначение платежа",
        example="Оплата штрафа по административному правонарушению постановление №18810054190022012345",
    )
    id: constr(max_length=36) = Field(
        ...,
        description="ИД черновика платежа",
        example="4d9065bc-55f7-4317-b728-5097344dc72f",
    )
    paySum: MoneyDto
    serviceProvider: DtoServiceProviderRs
    totalSum: MoneyDto


class DtoRequestPaymentRs(BaseModel):
    payment: Optional[DraftDto] = None
    status: Optional[PaymentStatusDtoRs] = None


class ErrorDtoRs(BaseModel):
    errors: Optional[List[ErrorFieldDtoRs]] = Field(None, description="Список полей с ошибками")
    status: StatusDtoRs


class PaymentDtoRs(BaseModel):
    actions: Actions
    charge: ChargeInfoDtoRs
    clientProduct: DtoClientProductRs
    commissionSum: Optional[MoneyDto] = None
    createdAt: datetime = Field(..., description="Время создания платежа")
    description: constr(max_length=210) = Field(..., description="Назначение платежа")
    documentId: constr(max_length=36) = Field(..., description="Номер платежа", example="1234567890")
    id: constr(max_length=36) = Field(..., description="ID платежа", example="4d9065bc-55f7-4317-b728-5097344dc72f")
    paySum: MoneyDto
    serviceProvider: DtoServiceProviderRs
    status: PaymentStatusDtoRs
    totalSum: MoneyDto


class ChargeDetailsDtoRs(BaseModel):
    document: Optional[ChargeSearchDocument] = None
    payment: ChargePaymentDetailDtoRs
    recipient: Optional[ChargeRecipientDetailDtoRs] = None
    ruling: ChargeRulingDetailDtoRs
    violation: ChargeViolationDetailDtoRs


class ChargeDtoRs(BaseModel):
    details: ChargeDetailsDtoRs
    isCompleteDetails: bool = Field(
        ...,
        description="Признак необходимости выполнения доп запроса по деталям штрафа за нарушение ПДД",
    )
    uin: constr(min_length=20, max_length=25) = Field(
        ...,
        description="УИН (универсальный идентификатор начисления)",
        example="18810054190022012345",
    )


class DtoConfirmPaymentRs(BaseModel):
    clientConfirm: Optional[ClientConfirmDtoRs] = None
    payment: Optional[PaymentDtoRs] = None
    status: Optional[PaymentStatusDtoRs] = None


class PageDtoRsChargeDtoRs(BaseModel):
    hasMore: bool = Field(..., description="Признак того - есть ли ещё результаты после текущей страницы")
    items: List[ChargeDtoRs] = Field(..., description="Результаты запроса по поиску начислений")
    pageNumber: conint(ge=0, le=100) = Field(..., description="Номер текущей страницы с результатами")
    pageSize: conint(ge=1, le=100) = Field(..., description="Размер страницы с результатами")
    total: conint(ge=0, le=1000000) = Field(..., description="Всего элементов в результатах")
