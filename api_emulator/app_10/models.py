# generated by fastapi-codegen:
#   filename:  new_yamls/app_8.yaml
#   timestamp: 2022-10-11T21:09:50+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, confloat, conint, constr


class ProductType(Enum):
    CARD = "CARD"
    ACCOUNT = "ACCOUNT"


class AccountDtoRs(BaseModel):
    productType: ProductType = Field(..., description="Общий тип продукта")
    publicId: constr(max_length=36) = Field(..., description="Публичный идентификатор продукта")


class ProductType1(Enum):
    ACCOUNT = "ACCOUNT"
    CARD = "CARD"


class CardDtoRs(BaseModel):
    productType: ProductType1 = Field(..., description="Общий тип продукта")
    publicId: constr(max_length=36) = Field(..., description="Публичный идентификатор продукта")


class ClientConfirmCodeDtoRq(BaseModel):
    code: constr(max_length=36) = Field(..., description="Значение кода подтверждения", example="123456")


class ConfirmPurpose(Enum):
    REQUEST_CODE = "REQUEST_CODE"
    CHECK_CODE = "CHECK_CODE"


class ClientConfirmDtoRq(BaseModel):
    confirmCode: Optional[ClientConfirmCodeDtoRq] = None
    confirmPurpose: ConfirmPurpose = Field(..., description="Цель запроса подтверждения")


class ProductType2(Enum):
    ACCOUNT = "ACCOUNT"
    CARD = "CARD"


class ClientProductDtoRq(BaseModel):
    productType: ProductType2 = Field(..., description="Тип продукта клиента")
    publicId: constr(max_length=255) = Field(
        ...,
        description="Id продукта клиента",
        example="1329CD96444B428895BEF56AF8016246",
    )


class ClientProductDtoRs(BaseModel):
    account: Optional[AccountDtoRs] = None
    card: Optional[CardDtoRs] = None


class ClientProductsDtoRs(BaseModel):
    accounts: Optional[List[AccountDtoRs]] = Field(None, description="Список счетов клиента")
    cards: Optional[List[CardDtoRs]] = Field(None, description="Список карт клиента")


class ConfirmCodeDtoRs(BaseModel):
    lifeTime: conint(ge=30, le=180) = Field(..., description="Время жизни кода подтверждения в секундах")


class ConfirmPaymentDtoRq(BaseModel):
    clientConfirm: Optional[ClientConfirmDtoRq] = None
    paymentId: constr(max_length=36) = Field(..., description="Id подтверждаемого платежа")


class CurrencyDto(BaseModel):
    code: constr(max_length=3) = Field(..., description="Код", example="RUB")


class DictionaryFieldValueDtoRs(BaseModel):
    key: constr(max_length=255) = Field(..., description="Технический ключ значения словаря")
    value: constr(max_length=255) = Field(..., description="Значение поля словаря которые видит и выбирает клиент")


class ErrorFieldDtoRs(BaseModel):
    code: constr(max_length=255) = Field(..., description="Код ошибки")
    message: constr(max_length=255) = Field(..., description="Текст ошибки", example="Некорректные данные")
    name: constr(max_length=255) = Field(..., description="Ключ/название ошибочного поля")


class InputFieldDtoRq(BaseModel):
    key: constr(min_length=1, max_length=32) = Field(..., description="Ключ поля")
    value: constr(max_length=255) = Field(..., description="Значение поля")


class Type(Enum):
    STRING = "STRING"
    NUMERIC = "NUMERIC"
    NUMBER = "NUMBER"
    DECIMAL = "DECIMAL"
    BOOLEAN = "BOOLEAN"
    MONEY = "MONEY"
    DATE = "DATE"
    MONTH_YEAR = "MONTH_YEAR"
    MONTH = "MONTH"
    YEAR = "YEAR"
    MOBILE_PHONE = "MOBILE_PHONE"
    DICTIONARY = "DICTIONARY"


class LengthRestrictDtoRs(BaseModel):
    max: conint(ge=0, le=255) = Field(..., description="Максимальное число символов в строке, включительно")
    min: conint(ge=0, le=255) = Field(..., description="Минимальное число символов в значении, включительно")


class MoneyDto(BaseModel):
    amount: confloat(ge=-999999999.0, le=999999999.0) = Field(..., description="Сумма", example=600.0)
    currency: Optional[CurrencyDto] = None


class NumberValueRestrictDtoRs(BaseModel):
    max: confloat(ge=0.0, le=999999999.0) = Field(..., description="Максимальное числовое значение, включительно")
    min: confloat(ge=0.0, le=999999999.0) = Field(..., description="Минимальное числовое значение, включительно")


class PayLimitDtoRs(BaseModel):
    max: MoneyDto
    min: MoneyDto


class PaySumDtoRs(BaseModel):
    payLimit: PayLimitDtoRs
    recommendedSums: Optional[List[MoneyDto]] = Field(None, description="Список рекомендованных сумм платежа")


class PaymentActionDtoRs(BaseModel):
    autoPaymentByBalance: bool = Field(
        ...,
        description="Возможно создание автоплатежа по сумме на балансе",
        example=True,
    )
    autoPaymentByDate: bool = Field(..., description="Возможно создание автоплатежа на дату", example=True)
    check: bool = Field(..., description="Возможно получение квитанции", example=True)
    remind: bool = Field(..., description="Возможно создание напоминания", example=True)
    repeat: bool = Field(..., description="Возможен повтор", example=True)
    template: bool = Field(..., description="Возможно создание шаблона", example=True)


class PaymentCheckDtoRs(BaseModel):
    pdf: constr(max_length=5000000) = Field(..., description="Чек в формате pdf, закодированный в base64")


class Type1(Enum):
    STRING = "STRING"
    NUMERIC = "NUMERIC"
    NUMBER = "NUMBER"
    DECIMAL = "DECIMAL"
    BOOLEAN = "BOOLEAN"
    MONEY = "MONEY"
    DATE = "DATE"
    MONTH_YEAR = "MONTH_YEAR"
    MONTH = "MONTH"
    YEAR = "YEAR"
    MOBILE_PHONE = "MOBILE_PHONE"
    DICTIONARY = "DICTIONARY"


class PaymentFieldDtoRs(BaseModel):
    description: Optional[constr(max_length=255)] = Field(None, description="Описание поля", example="Лицевой счет")
    key: constr(max_length=255) = Field(..., description="Ключ поля", example="phone")
    name: constr(max_length=255) = Field(..., description="Название поля", example="Лицевой счет")
    type: Type1 = Field(..., description="Тип поля")
    value: constr(max_length=255) = Field(..., description="Значение поля", example="89535184636")


class Code(Enum):
    PROCESSING = "PROCESSING"
    EXECUTED = "EXECUTED"
    REVIEW = "REVIEW"
    REFUSED = "REFUSED"
    NEED_CONFIRM = "NEED_CONFIRM"
    ERROR = "ERROR"


class PaymentStatusDtoRs(BaseModel):
    code: Code = Field(..., description="Код статуса платежа")
    description: constr(max_length=255) = Field(..., description="Описание статуса платежа")


class ProviderServiceDtoRq(BaseModel):
    id: constr(max_length=255) = Field(..., description="Id услуги поставщика услуг", example="1")


class SubType(Enum):
    MOBILE_BY_PHONE = "MOBILE_BY_PHONE"


class Type2(Enum):
    CONTRACT = "CONTRACT"
    GIS_HCS = "GIS_HCS"


class ProviderServiceDtoRs(BaseModel):
    categoryIds: List[constr(max_length=255)] = Field(
        ..., description="Список Id категорий, в которых доступна услуга ПУ"
    )
    id: constr(max_length=255) = Field(..., description="Id услуги ПУ", example="1")
    name: constr(max_length=255) = Field(..., description="Наименование услуги поставщика", example="КИВИ")
    subTypes: Optional[List[SubType]] = Field(None, description="Подтипы услуги ПУ")
    type: Type2 = Field(..., description="Тип услуги ПУ")


class RegexpValidatorDtoRs(BaseModel):
    description: constr(max_length=255) = Field(..., description="Описание валидатора")
    errorMessage: constr(max_length=255) = Field(..., description="Сообщение при ошибке")
    key: constr(max_length=255) = Field(..., description="Ключ валидатора по которому фронт может строить доп логику")
    regexp: constr(max_length=255) = Field(
        ...,
        description="Регулярное выражение для валидации",
        example="^[0-9]{4}-[0-9]{2}-[0-9]{2}$",
    )


class RequestPaymentDtoRq(BaseModel):
    clientProduct: ClientProductDtoRq
    fields: List[InputFieldDtoRq] = Field(..., description="Набор полей для оплаты")
    paySum: MoneyDto
    providerService: ProviderServiceDtoRq


class StartPaymentDtoRq(BaseModel):
    providerService: ProviderServiceDtoRq


class StatusDtoRs(BaseModel):
    code: constr(max_length=255) = Field(..., description="Код статуса")
    message: Optional[constr(max_length=255)] = Field(
        None, description="Сообщение", example="Ошибка валидации запроса на оплату"
    )


class XCHANNEL(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL1(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL2(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL3(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL4(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL5(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL6(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL7(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL8(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL9(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL10(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL11(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL12(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL13(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL14(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL15(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL16(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class XCHANNEL17(Enum):
    WEB = "WEB"
    MOBILE = "MOBILE"
    WEB_LITE = "WEB_LITE"
    MOBILE_LITE = "MOBILE_LITE"
    ATM = "ATM"
    CHATBOT = "CHATBOT"
    OPENAPI = "OPENAPI"


class ClientConfirmDtoRs(BaseModel):
    confirmCode: Optional[ConfirmCodeDtoRs] = None


class DictionaryFieldDtoRs(BaseModel):
    items: List[DictionaryFieldValueDtoRs] = Field(..., description="Значения словаря для выбора")


class DraftPaymentDtoRs(BaseModel):
    clientProduct: ClientProductDtoRs
    commissionSum: MoneyDto
    fields: List[PaymentFieldDtoRs] = Field(..., description="Набор полей платежа")
    id: constr(max_length=36) = Field(..., description="Id платежа", example="4d9065bc-55f7-4317-b728-5097344dc72f")
    paySum: MoneyDto
    totalSum: MoneyDto


class ErrorDtoRs(BaseModel):
    errors: Optional[List[ErrorFieldDtoRs]] = Field(None, description="Список полей с ошибками")
    status: StatusDtoRs


class InputFieldDtoRs(BaseModel):
    description: Optional[constr(min_length=1, max_length=255)] = Field(None, description="Описание поля")
    dictionaryField: Optional[DictionaryFieldDtoRs] = None
    editable: bool = Field(..., description="Поле можно отредактировать", example=True)
    inputMask: Optional[constr(min_length=1, max_length=128)] = Field(None, description="Маска ввода поля")
    key: constr(min_length=1, max_length=32) = Field(..., description="Ключ поля")
    lengthRestrict: Optional[LengthRestrictDtoRs] = None
    name: constr(min_length=1, max_length=64) = Field(..., description="Название поля")
    numberValueRestrict: Optional[NumberValueRestrictDtoRs] = None
    regexpValidators: Optional[List[RegexpValidatorDtoRs]] = Field(
        None, description="Список валидаторов поля в виде регулярных выражений"
    )
    required: bool = Field(..., description="Поле обязательно к заполнению", example=True)
    type: Type = Field(..., description="Тип поля")
    value: Optional[constr(min_length=1, max_length=255)] = Field(None, description="Значение поля")


class PaymentDtoRs(BaseModel):
    actions: PaymentActionDtoRs
    clientProduct: ClientProductDtoRs
    commissionSum: MoneyDto
    createdAt: datetime = Field(..., description="Время создания платежа")
    description: constr(max_length=255) = Field(..., description="Назначение платежа")
    documentId: constr(max_length=36) = Field(..., description="Номер платежа", example="1234567890")
    fields: List[PaymentFieldDtoRs] = Field(..., description="Набор полей платежа")
    id: constr(max_length=36) = Field(..., description="Id платежа", example="4d9065bc-55f7-4317-b728-5097344dc72f")
    paySum: MoneyDto
    providerService: ProviderServiceDtoRs
    status: PaymentStatusDtoRs
    totalSum: MoneyDto


class RequestPaymentDtoRs(BaseModel):
    payment: DraftPaymentDtoRs


class StartPaymentDtoRs(BaseModel):
    fields: List[InputFieldDtoRs] = Field(..., description="Список полей необходимый для оплаты услуги ПУ")
    paySum: PaySumDtoRs


class ConfirmPaymentDtoRs(BaseModel):
    clientConfirm: Optional[ClientConfirmDtoRs] = None
    payment: PaymentDtoRs
